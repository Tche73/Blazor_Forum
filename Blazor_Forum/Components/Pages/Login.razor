@page "/login"
@using Blazor_Forum.Auth
@using Blazor_Forum.Dto_s
@using Blazor_Forum.Repositories
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<h3>Connexion</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Mot de passe</label>
                        <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Connexion...</span>
                        }
                        else
                        {
                            <span>Se connecter</span>
                        }
                    </button>
                </EditForm>

                <div class="mt-3">
                    <p>Pas encore de compte ? <a href="/register">Inscrivez-vous</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new LoginDto();
    private string errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            var authStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            authStateProvider.NotifyUserAuthentication(result.Token);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Échec de connexion: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}