@page "/forum"
@using Blazor_Forum.Models
@using Blazor_Forum.Services
@using Blazor_Forum.Components
@inject IForumService ForumService
@inject NavigationManager NavigationManager

<h1>Forum de discussion</h1>

<div class="mb-3">
    <a href="/forum/create" class="btn btn-primary">Nouveau message</a>
    <button class="btn btn-secondary" @onclick="RefreshMessages">Recharger</button>

</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (isLoading)
{
    <p><em>Chargement...</em></p>
}
else if (messages == null || !messages.Any())
{
    <p>Aucun message n'a été publié pour le moment.</p>
}
else
{
    <div class="forum-container">
        @foreach (var message in messages)
        {
            <div class="message-block">
                <div class="message-header">
                    <div class="user-info">
                        <span class="username">@(message.User?.Username ?? "Utilisateur inconnu")</span>
                    </div>
                        <span class="post-date">@message.DatePublication.ToString("dd/MM/yyyy HH:mm")</span>
                    </div>
                <div class="message-content">
                    <p>@message.Contenu</p>
                    <p>Nombre de réponses : @(message.Reponses?.Count ?? 0)</p>
                </div>
               
                @if (message.Reponses != null && message.Reponses.Any())
                {
                    <div class="responses">
                        <h5>Réponses (@message.Reponses.Count)</h5>
                        @foreach (var reponse in message.Reponses)
                        {
                            <div class="response-item">
                                <div class="response-header">
                                    <span class="username">@(reponse.User?.Username ?? "Utilisateur inconnu")</span>
                                    <span class="post-date">@reponse.DatePublication.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                                <div class="response-content">
                                    <p>@reponse.Contenu</p>
                                </div>
                                <div class="response-footer">
                                    <LikeButton ReponseId="@reponse.Id" UserId="1" Likes="@(reponse.Likes?.Count ?? 0)" />
                                </div>
                            </div>
                        }
                    </div>
                }
                
                <div class="new-response">
                    <h6>Répondre à ce message</h6>
                    <ReponseForm MessageId="@message.Id" OnReponseAdded="RefreshMessages" />
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Message> messages;
    private string errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadMessages();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des messages: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMessages()
    {
        try
        {
            Console.WriteLine("Début du chargement des messages...");
            // Récupérer les messages
            messages = await ForumService.GetMessagesAsync();
            Console.WriteLine($"Nombre de messages récupérés : {messages?.Count ?? 0}");

            // if (messages != null && messages.Any())
            // {
                // Pour chaque message, charger ses réponses
                foreach (var message in messages)
                {
                    try
                    {
                        // var reponses = await ForumService.GetReponsesByMessageAsync(message.Id);
                        // message.Reponses = reponses ?? new List<Reponse>();
                        Console.WriteLine($"Message ID: {message.Id}, Nombre de réponses: {message.Reponses?.Count ?? 0}");
                        
                        StateHasChanged();
                    }
                    catch (Exception ex)
                    {
                        // On continue même si on ne peut pas charger les réponses d'un message
                        // message.Reponses = new List<Reponse>();
                        errorMessage = $"Erreur lors du chargement des messages: {ex.Message}";
                    }
                }
            // }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des messages: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" | {ex.InnerException.Message}";
            }
        }
    }
    
    private async Task RefreshMessages()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();
        
        await LoadMessages();
        
        isLoading = false;
        StateHasChanged();
    }
}