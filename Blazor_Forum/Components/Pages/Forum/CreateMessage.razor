@page "/forum/create"
@using Blazor_Forum.Models
@using Blazor_Forum.Services
@inject IForumService ForumService
@inject NavigationManager NavigationManager

<h3>Nouveau message</h3>

<EditForm Model="@message" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="contenu">Contenu</label>
        <InputTextArea id="contenu" @bind-Value="message.Contenu" class="form-control" rows="5" />
        <ValidationMessage For="@(() => message.Contenu)" />
    </div>

    <div class="form-group">
        <label for="userId">Utilisateur</label>
        <InputSelect id="userId" @bind-Value="message.UserId" class="form-control">
            <option value="">-- Sélectionner un utilisateur --</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.Username</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => message.UserId)" />
    </div>

    <button type="submit" class="btn btn-primary">Publier</button>
    <a href="/forum" class="btn btn-secondary">Annuler</a>
</EditForm>

@code {
    private Message message = new() { DatePublication = DateTime.Now };
    private List<User> users = new();

    protected override async Task OnInitializedAsync()
    {
        // Charger la liste des utilisateurs pour le dropdown
        users = await ForumService.GetUsersAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await ForumService.CreateMessageAsync(message);
            if (result != null)
            {
                NavigationManager.NavigateTo("/forum");
            }
        }
        catch (Exception ex)
        {
            // Vous pourriez vouloir afficher un message d'erreur à l'utilisateur
            Console.WriteLine($"Erreur: {ex.Message}");
        }
    }
}